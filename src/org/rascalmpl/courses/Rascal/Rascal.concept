# Rascal Language Reference

.Synopsis
Description of the Rascal meta-programming language 

.Syntax

.Types

.Function

.Details
Declarations Patterns Expressions Statements

.Description

We describe all features of the Rascal language in detail:

loctoc::[1]

You can find more information related to Rascal here:

*  link:/WhyRascal[Why Rascal]: gives the motivation for the Rascal language and describes various usage scenarios.
*  link:/GettingStarted[Getting Started] describes how to download, install and start Rascal.
*  link:/GettingHelp[Getting Help] shows how to use the help facilties and search the documentation. 
   See link:/GettingHelp#GettingHelp-FurtherReading[Further Reading] for a reading guide.
*  Library functies are described in link:/Libraries[Rascal Libraries].
*  We do not maintain a list of frequently asked questions (faq) but 
   use http://stackoverflow.com/questions/tagged/rascal[StackOverflow] instead.

.Examples

*  We show examples for each Rascal language construct described here.
*  You can find many simple code examples in link:/Recipes[Recipes]. 
*  The link:/Libraries[Rascal Libraries] contain examples for most functions. 

.Benefits
*  Rascal has everything you need for any kind of (meta-)program you want to write. See link:/WhyRascal[Why Rascal].

.Pitfalls

*  Rascal is a procedural/functional language with immutable data. Do not confuse this with object-oriented programming.
*  Rascal allows you to write highly imperative code, but it has declarative constructs that lead to shorter and more readable code.

